<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Monster &amp; Flower</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="sherry0429.github.io/"/>
  <updated>2019-03-04T09:16:26.761Z</updated>
  <id>sherry0429.github.io/</id>
  
  <author>
    <name>Tianyou Pan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welcome</title>
    <link href="sherry0429.github.io/9999/12/31/Welcome/"/>
    <id>sherry0429.github.io/9999/12/31/Welcome/</id>
    <published>9999-12-31T01:38:05.000Z</published>
    <updated>2019-03-04T09:16:26.761Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome ! </p><p>This is tianyou pan’s blog,</p><p>This blog’s theme is developer by LouisBarranqueiro, you can see theme in here:</p><p><a href="https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/docs/user.md" target="_blank" rel="noopener">https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak/blob/master/docs/user.md</a></p><p>Blog’s content is modify / edit / publish by myself.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome ! &lt;/p&gt;
&lt;p&gt;This is tianyou pan’s blog,&lt;/p&gt;
&lt;p&gt;This blog’s theme is developer by LouisBarranqueiro, you can see theme in here:&lt;/p&gt;

      
    
    </summary>
    
      <category term="other" scheme="sherry0429.github.io/categories/other/"/>
    
    
      <category term="guide" scheme="sherry0429.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>git clone error RPC failed</title>
    <link href="sherry0429.github.io/2019/02/13/gitclone%E7%9A%84postbuffer%E4%B8%8A%E9%99%90%E9%97%AE%E9%A2%98/"/>
    <id>sherry0429.github.io/2019/02/13/gitclone的postbuffer上限问题/</id>
    <published>2019-02-13T02:17:09.154Z</published>
    <updated>2019-02-13T09:02:47.756Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h4 id="1-错误内容："><a href="#1-错误内容：" class="headerlink" title="1. 错误内容："></a>1. 错误内容：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error: RPC failed; curl 18 transfer closed with 31812496 bytes remaining to read</span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: index-pack failed</span><br></pre></td></tr></table></figure><h4 id="2-错误原因："><a href="#2-错误原因：" class="headerlink" title="2. 错误原因："></a>2. 错误原因：</h4><p>git clone 分为两种形式，https或者ssh，前者（https）clone时会有一个buffer上限。当超过此上限就会报错。后者则不会。</p><h4 id="3-修改方法："><a href="#3-修改方法：" class="headerlink" title="3. 修改方法："></a>3. 修改方法：</h4><p>方法1：</p><p>使用ssh的方式克隆。</p><p>方法2：</p><p>shell下输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 524288000</span><br></pre></td></tr></table></figure><p>修改postBuffer为500MB。当然这个值可以视情况自己去增大，如果真的非常大，还是使用方法一，不建议此方法。</p><h4 id="4-另"><a href="#4-另" class="headerlink" title="4. 另"></a>4. 另</h4><p>git clone瘦身的方式还有一种，即给仓库开一个新分支，在新分支中只放少量需要修改的文件。之后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b branch_name git_repo_url</span><br></pre></td></tr></table></figure><p>只克隆该分支，之后pull。然后由owner对两个branch做merge即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git clone时总是失败，提示RPC failed。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="sherry0429.github.io/categories/git/"/>
    
    
      <category term="guide" scheme="sherry0429.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>gitment修复[object ProgressEvent]</title>
    <link href="sherry0429.github.io/2019/02/12/gitment%E4%BF%AE%E5%A4%8D/"/>
    <id>sherry0429.github.io/2019/02/12/gitment修复/</id>
    <published>2019-02-12T02:13:58.903Z</published>
    <updated>2019-02-13T09:02:56.655Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h3 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h3><p><a href="https://imsun.github.io/gitment/dist/gitment.browser.js" target="_blank" rel="noopener">https://imsun.github.io/gitment/dist/gitment.browser.js</a> 内 </p><p>向网址 <a href="https://gh-oauth.imsun.net" target="_blank" rel="noopener">https://gh-oauth.imsun.net</a> 发送了验证请求，这个gh-oauth.imsun.net是作者自行搭建的，现在不在维护了。所以出现了问题。</p><p>那么修复过程就是：</p><ol><li>自己建立这个服务器</li><li>browser.js中引用这个网址的地方，改为自己的网址</li><li>主题中引用的browser.js，不能是原来gitment的js，而要是自己修改过的js</li></ol><h3 id="2-修复步骤"><a href="#2-修复步骤" class="headerlink" title="2. 修复步骤"></a>2. 修复步骤</h3><h4 id="2-1-建立服务器"><a href="#2-1-建立服务器" class="headerlink" title="2.1. 建立服务器"></a>2.1. 建立服务器</h4><p>ssh上自己的服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 安装npm</span><br><span class="line">2. 安装nginx</span><br><span class="line">3. 安装git</span><br><span class="line">4. git clone https://github.com/imsun/gh-oauth-server</span><br><span class="line">5. cd gh-oauth-server</span><br><span class="line">6. npm install</span><br></pre></td></tr></table></figure><p>修改nginx文件，具体自行百度，即将自己的域名映射到本地3000端口，因为gh-oauth-server是绑定在3000端口上的。</p><p><strong>当然，理论上可以直接用ip + 3000端口的方式访问到这个server，不需要nginx的，但是这样一来你的ip会暴露在browser.js中，十分的不安全。同时也不利于开启https。</strong></p><h4 id="2-2-测试"><a href="#2-2-测试" class="headerlink" title="2.2. 测试"></a>2.2. 测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd gh-oauth-server</span><br><span class="line">nohup npm start &amp;</span><br><span class="line">vi nohup.out</span><br></pre></td></tr></table></figure><p>输出信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span> gh-oauth-server@0.0.1 start /home/pty/gitment-oauth-server/gh-oauth-server</span><br><span class="line"><span class="meta">&gt;</span> node server</span><br><span class="line"></span><br><span class="line">gh-oauth-server listening on port 3000</span><br></pre></td></tr></table></figure><p>则表示一切正常</p><h4 id="2-3-建立自己的gitment-browser-js"><a href="#2-3-建立自己的gitment-browser-js" class="headerlink" title="2.3. 建立自己的gitment.browser.js"></a>2.3. 建立自己的gitment.browser.js</h4><p>随便找某个node_modules，只要有gitment就行，最好是最新的。然后修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">..\node_modules\gitment\dist\gitment.browser.js</span><br></pre></td></tr></table></figure><p>将其中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_utils.http.post(<span class="string">'https://gh-oauth.imsun.net'</span>, &#123;</span><br><span class="line">   code: code,</span><br><span class="line">   client_id: client_id,</span><br><span class="line">   client_secret: client_secret</span><br><span class="line"> &#125;, <span class="string">''</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">   _this.accessToken = data.access_token;</span><br><span class="line">   _this.update();</span><br><span class="line"> &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">   _this.state.user.isLoggingIn = <span class="literal">false</span>;</span><br><span class="line">   alert(e);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>代码里引用的<a href="https://gh-oauth.imsun.net服务器地址，修改为刚才2.1步骤我们启动的服务器地址。" target="_blank" rel="noopener">https://gh-oauth.imsun.net服务器地址，修改为刚才2.1步骤我们启动的服务器地址。</a></p><p>然后将修复后的文件存储在git上，或者oss，或者服务器上，<strong><em>要求能从外部访问。</em></strong></p><h3 id="3-tranquilpeak的gitment修复"><a href="#3-tranquilpeak的gitment修复" class="headerlink" title="3. tranquilpeak的gitment修复"></a>3. tranquilpeak的gitment修复</h3><p>这个主题相对于其他主题而言，可以自己修改代码后编译。但是编译过程中需要安装很多东西，步骤比较繁琐。</p><p>这里只指出步骤，在编译过程中出现的问题基本上google都有答案，一般就是MSbuild不对，比如少Net 2.5之类的。</p><p>下面为修复步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. cd tranquilpeak\layout\_partial</span><br><span class="line">2. vi script.ejs</span><br><span class="line">3. 将gc.src = &apos;**&apos;; 一行中的地址，替换为你自己修复过后的gitment.browser.js的地址。</span><br></pre></td></tr></table></figure><p>运行自带的build-tranquilpeak.sh即可。</p><p>运行之后会生成新的tranquilpeak，是一个新文件夹，hexo-theme-tranquilpeak-built-for-production-1.11.0</p><p>在hexo的config.yml中引用这个新文件夹即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在全网的gitment都出现了一个问题[object ProgressEvent]，见：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/imsun/gitment/issues/170&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/imsun/gitment/issues/170&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我记录一下我自己的修复过程，这篇博文下的评论已经恢复，遇到问题的可以留言进行交流。&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="sherry0429.github.io/categories/other/"/>
    
    
      <category term="guide" scheme="sherry0429.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>NPM修复Cannot read property &#39;match&#39; of undefined</title>
    <link href="sherry0429.github.io/2019/02/12/NPM%E4%BF%AE%E5%A4%8DCannot-read-property-matchof-undefined/"/>
    <id>sherry0429.github.io/2019/02/12/NPM修复Cannot-read-property-matchof-undefined/</id>
    <published>2019-02-12T02:13:30.414Z</published>
    <updated>2019-02-13T09:03:18.169Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>npm出现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">18 verbose stack TypeError: Cannot read property 'match' of undefined</span><br><span class="line">18 verbose stack     at tarballToVersion (C:\Program Files\nodejs\node_modules\npm\lib\install\inflate-shrinkwrap.js:87:20)</span><br><span class="line">18 verbose stack     at inflatableChild (C:\Program Files\nodejs\node_modules\npm\lib\install\inflate-shrinkwrap.js:99:22)</span><br><span class="line">18 verbose stack     at BB.each (C:\Program Files\nodejs\node_modules\npm\lib\install\inflate-shrinkwrap.js:55:12)</span><br><span class="line">18 verbose stack     at tryCatcher (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">18 verbose stack     at Object.gotValue (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\reduce.js:155:18)</span><br><span class="line">18 verbose stack     at Object.gotAccum (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\reduce.js:144:25)</span><br><span class="line">18 verbose stack     at Object.tryCatcher (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">18 verbose stack     at Promise._settlePromiseFromHandler (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\promise.js:512:31)</span><br><span class="line">18 verbose stack     at Promise._settlePromise (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\promise.js:569:18)</span><br><span class="line">18 verbose stack     at Promise._settlePromise0 (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\promise.js:614:10)</span><br><span class="line">18 verbose stack     at Promise._settlePromises (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\promise.js:693:18)</span><br><span class="line">18 verbose stack     at Async._drainQueue (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\async.js:133:16)</span><br><span class="line">18 verbose stack     at Async._drainQueues (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\async.js:143:10)</span><br><span class="line">18 verbose stack     at Immediate.Async.drainQueues [as _onImmediate] (C:\Program Files\nodejs\node_modules\npm\node_modules\bluebird\js\release\async.js:17:14)</span><br><span class="line">18 verbose stack     at runCallback (timers.js:696:18)</span><br><span class="line">18 verbose stack     at tryOnImmediate (timers.js:667:5)</span><br><span class="line">19 verbose cwd C:\blog\themes\tranquilpeak</span><br><span class="line">20 verbose Windows_NT 10.0.17763</span><br><span class="line">21 verbose argv "C:\\Program Files\\nodejs\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "--registry=https://registry.npm.taobao.org"</span><br><span class="line">22 verbose node v10.3.0</span><br><span class="line">23 verbose npm  v6.1.0</span><br><span class="line">24 error Cannot read property 'match' of undefined</span><br><span class="line">25 verbose exit [ 1, true ]</span><br></pre></td></tr></table></figure><p>如何解决？</p><p>删除package-lock.json和node_modules即可，然后重新npm install</p><p><a href="https://npm.community/t/cannot-read-property-match-of-undefined/203/2" target="_blank" rel="noopener">https://npm.community/t/cannot-read-property-match-of-undefined/203/2</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NPM修复Cannot read property ‘match’ of undefined问题。&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="sherry0429.github.io/categories/other/"/>
    
    
      <category term="guide" scheme="sherry0429.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>centos使用ss客户端</title>
    <link href="sherry0429.github.io/2019/02/11/centos%E4%BD%BF%E7%94%A8ss%20%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>sherry0429.github.io/2019/02/11/centos使用ss 客户端/</id>
    <published>2019-02-11T09:10:37.358Z</published>
    <updated>2019-02-11T09:10:07.608Z</updated>
    
    <content type="html"><![CDATA[<p>1.yum install shadowsocks-qt5</p><p>2.输入配置文件 启动ssqt5</p><p>3.在网络设置中，代理选择手动设置，删除http，https代理，只保留socks代理，域127.0.0.1，端口1080.删除忽略主机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.yum install shadowsocks-qt5&lt;/p&gt;
&lt;p&gt;2.输入配置文件 启动ssqt5&lt;/p&gt;
&lt;p&gt;3.在网络设置中，代理选择手动设置，删除http，https代理，只保留socks代理，域127.0.0.1，端口1080.删除忽略主机。&lt;/p&gt;

      
    
    </summary>
    
      <category term="other" scheme="sherry0429.github.io/categories/other/"/>
    
    
      <category term="guide" scheme="sherry0429.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>Django重置models的办法</title>
    <link href="sherry0429.github.io/2019/02/11/django%20%E9%87%8D%E7%BD%AEmodels/"/>
    <id>sherry0429.github.io/2019/02/11/django 重置models/</id>
    <published>2019-02-11T09:10:37.353Z</published>
    <updated>2019-02-11T09:09:36.374Z</updated>
    
    <content type="html"><![CDATA[<p>1.删除app的migrations</p><p>2.删除数据库django_migrations表中对应该app的所有记录</p><p>3.确保数据库的表和app中的migrations一致</p><p>4.python manage.py makemigrations app_name </p><p>5.python manage.py migrate app_name –fake</p><p>6.此时已经重置该app的migration记录到此项目</p><p>7.在此项目进行变更时，make migrations , migrate将可以同步到数据库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.删除app的migrations&lt;/p&gt;
&lt;p&gt;2.删除数据库django_migrations表中对应该app的所有记录&lt;/p&gt;
&lt;p&gt;3.确保数据库的表和app中的migrations一致&lt;/p&gt;
&lt;p&gt;4.python manage.py makemigratio
      
    
    </summary>
    
      <category term="other" scheme="sherry0429.github.io/categories/other/"/>
    
    
      <category term="guide" scheme="sherry0429.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>README</title>
    <link href="sherry0429.github.io/2019/02/11/README/"/>
    <id>sherry0429.github.io/2019/02/11/README/</id>
    <published>2019-02-11T08:11:16.614Z</published>
    <updated>2019-02-11T08:45:40.879Z</updated>
    
    <content type="html"><![CDATA[<p>个人博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;个人博客&lt;/p&gt;

      
    
    </summary>
    
      <category term="other" scheme="sherry0429.github.io/categories/other/"/>
    
    
      <category term="guide" scheme="sherry0429.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>提高bower install的速度</title>
    <link href="sherry0429.github.io/2019/02/11/%E6%8F%90%E9%AB%98bowerinstall%E7%9A%84%E9%80%9F%E5%BA%A6/"/>
    <id>sherry0429.github.io/2019/02/11/提高bowerinstall的速度/</id>
    <published>2019-02-11T06:52:54.000Z</published>
    <updated>2019-02-14T03:05:43.797Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>我在bower install的过程中，需要git clone font-awesome，这个过程中断了N次。即使加了代理，设置为全局，提高git clone的buffer，也没有什么用处。</p><p>最后在这里找到了解决方式：</p><p><a href="https://www.jianshu.com/p/ba132d8b6ed7" target="_blank" rel="noopener">https://www.jianshu.com/p/ba132d8b6ed7</a></p><p>采用这位博主的方案1，给git clone设置代理，并且代理设置为自己的socks5代理即可。</p><p>以我为例，我使用ss代理，本地端口为1080，则这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 'socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy 'socks5://127.0.0.1:1080'</span><br></pre></td></tr></table></figure><p>查看是否生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy</span><br></pre></td></tr></table></figure><p>关闭代理（因为可能代理会失效，或者会关闭，所以记录一下）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bower install的速度太慢了，即使加了VPN，也慢如老狗，如何破之？&lt;/p&gt;
    
    </summary>
    
      <category term="guide" scheme="sherry0429.github.io/categories/guide/"/>
    
    
      <category term="node" scheme="sherry0429.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>postgresql的序列重置</title>
    <link href="sherry0429.github.io/2019/01/30/postgresql%E7%9A%84%E5%BA%8F%E5%88%97/"/>
    <id>sherry0429.github.io/2019/01/30/postgresql的序列/</id>
    <published>2019-01-30T09:47:29.185Z</published>
    <updated>2019-02-11T08:48:02.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="postgresql的序列"><a href="#postgresql的序列" class="headerlink" title="postgresql的序列"></a>postgresql的序列</h1><p>设置pfund_stockindexdata表的id序列起始值为338<br>SELECT setval(‘pfund_stockindexdata_id_seq’, 338, true); </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">下一个值：nextval(regclass)</span><br><span class="line">当前值：currval(regclass)</span><br><span class="line">设置值：setval(regclass)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;postgresql的序列&quot;&gt;&lt;a href=&quot;#postgresql的序列&quot; class=&quot;headerlink&quot; title=&quot;postgresql的序列&quot;&gt;&lt;/a&gt;postgresql的序列&lt;/h1&gt;&lt;p&gt;设置pfund_stockindexdata表的id
      
    
    </summary>
    
      <category term="other" scheme="sherry0429.github.io/categories/other/"/>
    
    
      <category term="guide" scheme="sherry0429.github.io/tags/guide/"/>
    
  </entry>
  
  <entry>
    <title>如何购买比特币</title>
    <link href="sherry0429.github.io/2018/02/27/%E5%A6%82%E4%BD%95%E8%B4%AD%E4%B9%B0%E6%AF%94%E7%89%B9%E5%B8%81/"/>
    <id>sherry0429.github.io/2018/02/27/如何购买比特币/</id>
    <published>2018-02-27T08:24:39.000Z</published>
    <updated>2018-02-27T09:51:44.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>时间不多，简单粗暴，通过几个部分介绍</p><h3 id="1-为什么购买"><a href="#1-为什么购买" class="headerlink" title="1. 为什么购买"></a>1. 为什么购买</h3><p>由于现在比特币可以和人民币进行兑换，而比特币又有很多种，各种比特币之间的汇率还不一致，我们可以不严谨的做以下比方：</p><p><strong><em>每一种比特币既是一种货币，本身又是一种股票</em></strong></p><p>那么就有这样一种获利方式：</p><ul><li>买入一种比特币<ul><li>兑换为另一种比特币</li><li>等升值卖出</li></ul></li><li>长期持有一种比特币<ul><li>等待升值卖出</li></ul></li></ul><p>所以比特币的投资，可以理解为希望购买比特币，在币种之间转换，或等待升值时抛售，以此赚取差价。</p><h3 id="2-购买哪种比特币"><a href="#2-购买哪种比特币" class="headerlink" title="2. 购买哪种比特币"></a>2. 购买哪种比特币</h3><p>首先要明确的是，比特币由于可以通过挖矿获取，和其他货币不同：</p><ul><li>它可以是无上限的</li><li>它可以是无限分割的</li></ul><p>但在实际场景中，这两种极端情况并不会发生</p><p>那么如何判断买哪种比特币值？</p><p>其实我也不知道，但购买这种投资资产的基本原则，我认为应该是：</p><ul><li>你明白你在买什么</li><li>你明白你买的东西为什么升值，为什么贬值</li></ul><p>我说一点我对于比特币的肤浅理解：</p><h4 id="2-1-为何升值"><a href="#2-1-为何升值" class="headerlink" title="2.1 为何升值"></a>2.1 为何升值</h4><ul><li>炒作</li><li>该比特币本身底层的区块链技术升值</li><li>数量减少</li><li>入场者增加</li></ul><p>因此通过这四点，可以粗略的去估计一个比特币是否值得购买。</p><h3 id="3-区块链和比特币"><a href="#3-区块链和比特币" class="headerlink" title="3. 区块链和比特币"></a>3. 区块链和比特币</h3><p>这两个的关系在我的理解是这样：</p><p><strong><em>区块链是一种支撑比特币的技术，技术不同，往往会发行不同的比特币，技术本身决定着这个比特币作为货币的性能</em></strong></p><p>因此判断比特币的价值，就离不开区块链，而区块链技术又比较底层，这成为了判断比特币价值的一道门槛。</p><p>而区块链技术本身，又不仅可以用于比特币，还可以用于其他方面，只是目前还缺少实际的落地场景。</p><p>给区块链做个比喻的话，有点像TCP/IP技术，只不过这两个解决的问题侧重又有所不同，虽然都属于底层通讯。</p><h3 id="4-购买比特币的风险"><a href="#4-购买比特币的风险" class="headerlink" title="4. 购买比特币的风险"></a>4. 购买比特币的风险</h3><p>这里只举一些风险的来源：</p><ul><li>对所持币的底层区块链技术不熟悉</li><li>安全性不够的交易所</li><li>媒体炒作带来的涨跌</li><li>政府管控</li><li>黑客，灰色产业造成的损失</li></ul><p>这里的1,2,5三点可以合起来看：</p><ul><li>新发行的币，底层区块链技术简单</li><li>安全性不够的交易所，给用户带来的账户爆破风险</li><li>黑客入侵交易所，盗走用户的比特币</li><li>灰色产业链条消化比特币</li><li>用户蒙受损失</li></ul><p>除此以外，有件事值得一提，以太坊的两种比特币，就是因为被黑客入侵后，创始人决定硬分叉来让黑客盗走的比特币失效而产生的，即老币ETC，新币ETH。</p><p>至于什么是硬分叉？这涉及到区块链底层技术，我不是很了解，根据字面意义做一下推测，希望明白的人士斧正。</p><p>在我的理解中，比特币底层其实就是一系列链条，这里最长的链条，就是主链，比特币的交易实际上就发生在这些链条上。而一旦主链出了问题，那么就从某一个区块处分出一个新的链条，不再承认该区块前向或后向的所有区块。</p><h3 id="5-如何购买"><a href="#5-如何购买" class="headerlink" title="5. 如何购买"></a>5. 如何购买</h3><h4 id="5-1-比特币买卖与币币交易"><a href="#5-1-比特币买卖与币币交易" class="headerlink" title="5.1 比特币买卖与币币交易"></a>5.1 比特币买卖与币币交易</h4><p>首先要分清楚，网上交易平台分为两种，一种是负责比特币与现实货币的兑换，一种是负责比特币之间的兑换。当然有的交易平台会两种都做。</p><p>那么我们就需要先找到一个比特币与现实货币兑换的平台，将我们手里的RMB换算成比特币。</p><p>接着我们有两种选择：</p><ul><li>利用手里的比特币去换别的比特币，等升值，卖出</li><li>等手里的比特币升值，卖出</li></ul><p>这里我做的是1，那么现在说一下步骤：</p><h4 id="5-2-购买比特币"><a href="#5-2-购买比特币" class="headerlink" title="5.2 购买比特币"></a>5.2 购买比特币</h4><p><a href="http://localbitcoins.com/" target="_blank" rel="noopener">购买，卖出比特币网站</a></p><p>localbitcoins这个网站，貌似是不用梯子，但我还是用了，因为有时候觉得不稳定，此外，有时候会显示英文界面，看不懂的话刷新一下，就会变成中文界面了。</p><p>然后依次做以下步骤：</p><ul><li>注册</li><li>手机验证</li><li>实名验证（可跳过）</li><li>双重身份验证（可跳过）</li></ul><p>接下来就可以购买比特币了！</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/buy_bitcoin_1.jpg" alt="buy_bitcoin_1"></p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/buy_bitcoin_2.jpg" alt="buy_bitcoin_2"></p><p>这里需要注意，如果你没有做实名验证，那么只能向允许出售比特币给未实名用户的卖方发起交易。</p><p>卖出比特币，也是差不多的逻辑，在一开始的页面点击“快速出售”即可。</p><h4 id="5-3-比特币转移"><a href="#5-3-比特币转移" class="headerlink" title="5.3 比特币转移"></a>5.3 比特币转移</h4><p>如前面所说，我现在想把比特币转移到币币交易的网站去，在那里把购买的BTC换成ETH，怎么办呢？</p><p>首先，是<a href="https://www.binance.com" target="_blank" rel="noopener">币币交易网站</a>，需要说明的是，<strong><em>这个网站不对中国用户开放，只有用梯子才可以访问到哟</em></strong>。</p><p>还是依次进行：</p><ul><li>注册</li><li>验证手机</li><li>实名验证（可跳过）</li></ul><p>然后登陆后，选择上方的资产管理，点充值</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/buy_bitcoin_3.jpg" alt="buy_bitcoin_3"></p><p>将充值页面的ETC充值地址复制下来</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/buy_bitcoin_4.jpg" alt="buy_bitcoin_4"></p><p>接下来重新回到localbitcoins.com，点击钱包</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/buy_bitcoin_5.jpg" alt="buy_bitcoin_5"></p><p>然后在下面这个页面填好自己的需求后点击继续，按照提示执行即可。</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/buy_bitcoin_6.jpg" alt="buy_bitcoin_6"></p><p>需要注意三点：</p><ul><li><strong><em>是转账是有手续费的，按RMB算我差不多被扣了8块钱。</em></strong></li><li><strong><em>交易时自己先支付到卖家的支付宝/微信/银行上，然后通知卖家，等待卖家释放比特币</em></strong></li><li><strong><em>转账是有时间的，几个小时，甚至1天，可能都会出现，只有转账成功后，才可以在binance的充值记录上查到</em></strong></li></ul><p>从第二点不难看出，<strong>如果卖家拒绝释放比特币？….</strong></p><p>目前我还没有找到解决这个问题的办法。</p><p>但不难看出，这个网站上的信用度，交易额度，都是为了防止这件事的发生。随着交易数量的增加，交易额度才会上涨。也就是说：</p><ul><li>你能一次买10个比特币的人，先前必定也交易过很多次比特币了</li><li>他一定会留下很多交易记录。可以判断他的信用评级</li></ul><p>因此，只要从高信用度的人手里买比特币，一般就不会出什么问题。</p><h4 id="5-4-思考"><a href="#5-4-思考" class="headerlink" title="5.4 思考"></a>5.4 思考</h4><p>从localcoins.com对交易额度/评级的规则设置上，可以学习到一种策略，即，<strong>如何解决两人之间的信用问题？</strong></p><p>以我的理解，localcoins.com的策略是：</p><ul><li><strong>用小额交易来模拟信用积累的过程</strong></li><li><strong>越大额的交易，对信用的需求越大</strong></li><li><strong>用限制交易让信用的积累变的有意义</strong></li></ul><p>套用到现实生活，这样的逻辑其实也屡见不鲜：</p><ol><li>当去图书馆问阿姨借书时，当和她不熟，只能一次借一本，后来天天去，熟了以后，可以借很多本了。甚至可以逾期归还。</li><li>大学老师一般不让你拷ppt，但假如你每天都提问题，和他讨论ppt的内容，那么最后他大概率会让你拷走ppt</li></ol><p>这种思路倒是很有意思，localcoins.com把现实中的信用积累过程用程序实现了。</p><p>再深度思考一下，以下为<a href="http://www.8btc.com/wiki/bitcoin-a-peer-to-peer-electronic-cash-system" target="_blank" rel="noopener">中本聪的关于比特币的白皮书</a> 中的一段话</p><blockquote><p>所以，我们非常需要这样一种电子支付系统，它基于密码学原理而不基于信用，使得任何达成一致的双方，能够直接进行支付，从而不需要第三方中介的参与。杜绝回滚(reverse)支付交易的可能，这就可以保护特定的卖家免于欺诈</p></blockquote><p>从这段话中不难看出，它是为了保护“卖家”。那么买家怎么被保护？localcoins.com的这种机制给出了一个答案，当然，并不是这样就安全了，我们可以想象：</p><ul><li>一个有着庞大流动资金的人，靠着高频交易刷高自己的资金限额</li><li>接下来低于市价抛售大量的比特币，对方支付后，自己就注销账号</li><li>把自己的这部分比特币离线，再用洗钱的手段将获取的钱放到自己的合法账户里</li></ul><p>只是有庞大流动资金的人会不会花精力去做这个，是值得商榷的一件事，毕竟从时间成本上考量，收益似乎有些低了。</p><p>除此以外，会不会有差评师的存在？故意刷低对手的信任评级？虽然刷低信用评级需要付出代价（交易成功才能评价）</p><p>在买卖比特币这一块，如何更好地保护买家和卖家，应该每个交易所都会思考吧。</p><p>此外，看上去，有一个第三方可以用来托管现金和比特币的话，似乎解决了买家和卖家之间的信任问题，但这又违反了先前“杜绝回滚支付交易的可能”的要求。此外，又中心化了，如何去中心化呢？</p><p>那么比特币与比特币之间，是杜绝回滚的，那么比特币与现实货币之间，又应该如何呢？</p><p>欢迎大家讨论。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mmmm，蹭蹭热点，一直听人说比特币，区块链，决定自己买一点，也算紧跟潮流了，不多，只有100 CNY~&lt;/p&gt;
    
    </summary>
    
      <category term="knowledge" scheme="sherry0429.github.io/categories/knowledge/"/>
    
    
      <category term="BitCoin" scheme="sherry0429.github.io/tags/BitCoin/"/>
    
  </entry>
  
  <entry>
    <title>比特币与区块链</title>
    <link href="sherry0429.github.io/2018/02/26/%E6%AF%94%E7%89%B9%E5%B8%81%E4%B8%8E%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <id>sherry0429.github.io/2018/02/26/比特币与区块链/</id>
    <published>2018-02-26T02:12:22.000Z</published>
    <updated>2018-02-26T02:34:08.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>原link：<a href="https://www.zhihu.com/question/37290469/answer/107612456" target="_blank" rel="noopener">区块链是什么，如何简单易懂地介绍区块链？ - 汪乐-LaiW3n</a></p><p>以下转载原文：</p><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>事情是这样的，最近我的室友Hasaki一直在问我区块链和比特币的事情，我尝试了很多种不通的姿势以求简单通俗形象生动地跟他解释什么是区块链技术，但是最后都失败了。因此我萌生了要写一篇BlockChain for Babies（又名：如何向你的弱智室友解释区块链）的想法，以求能简单直观生动形象地向对区块链技术不了解但是想知道区块链是什么的人介绍区块链技术或者比特币。</p><p>因为面向的读者是不想知道具体技术实现只想了解区块链的人群，因此本文避开了一些底层和算法细节，采用比较主观的方式来展示笔者对区块链技术的感性认识。<strong>如果你只是对区块链感兴趣，并没有深入学习的打算，或者只是想像我一样在别人问起来的时候装逼，本文应该是一篇很好的“导论”。</strong></p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>区块链本质上是一个去中心化的分布式账本数据库（感谢</p><p><a href="http://www.zhihu.com/people/12bb0cb39453cc3827ea122146cedaa9" target="_blank" rel="noopener">@程剑宇</a></p><p>这是区块链的定义，因此要逐步了解区块链，我们需要一步步了解如下东西。</p><h2 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h2><h2 id="先来考虑一个中心化集中式处理的过程。你要在某宝上买一部手机，交易流程是：你将钱打给支付宝－支付宝收款后通知卖家发货－卖家发货－你确认收货－支付宝把钱打给卖家。"><a href="#先来考虑一个中心化集中式处理的过程。你要在某宝上买一部手机，交易流程是：你将钱打给支付宝－支付宝收款后通知卖家发货－卖家发货－你确认收货－支付宝把钱打给卖家。" class="headerlink" title="先来考虑一个中心化集中式处理的过程。你要在某宝上买一部手机，交易流程是：你将钱打给支付宝－支付宝收款后通知卖家发货－卖家发货－你确认收货－支付宝把钱打给卖家。"></a>先来考虑一个中心化集中式处理的过程。你要在某宝上买一部手机，交易流程是：你将钱打给支付宝－支付宝收款后通知卖家发货－卖家发货－你确认收货－支付宝把钱打给卖家。</h2><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/BitCoin-Block-2018-02-26-1.jpg" alt="BitCoin-Block-2018-02-26-1"></p><p>在这个过程中，虽然你是在和卖家交易，但是这笔交易还牵扯到了除了你和卖家的第三方，即支付宝，你和卖家的交易都是围绕支付宝展开。因此，如果支付宝系统出了问题便会造成这笔交易的失败。并且虽然你只是简单的买了一个手机，但是你和卖家都要向第三方提供多余的信息。因此考虑极端情况，如果支付宝跑路了或者是拿了钱不却不承认你的交易或者是支付宝所在的城市因为开G20把所有人都赶走了(?)，那么你就悲剧了。</p><p>而去中心化的处理方式就要显得简单很多，你只需要和卖家交换钱和手机，然后双方都声称完成了这笔交易，就OK了。</p><p>可以看出在某些特定情况下，去中心化的处理方式会更便捷，同时也无须担心自己的与交易无关的信息泄漏。</p><p>其实如果只考虑两个人的交易并不能把去中心化的好处完全展示出来，设想如果有成千上万笔交易在进行，去中心化的处理方式会节约很多资源，使得整个交易自主化、简单化，并且排除了被中心化代理控制的风险。</p><p>去中心化是区块链技术的颠覆性特点，它无需中心化代理，实现了一种点对点的直接交互，使得高效率、大规模、无中心化代理的信息交互方式成为了现实。</p><p>当然，上述的例子有一个很大的潜在问题：没有了权威的中心化代理，怎样保证每笔交易的准确性和有效性呢？比如：如果没有了权威的中心化代理，张三某一天借了我100块钱，但是不还钱还不承认怎么办？这里就引出了区块链的其它特性。</p><h2 id="两个基础难题"><a href="#两个基础难题" class="headerlink" title="两个基础难题"></a>两个基础难题</h2><p>在去中心化以后，整个系统中没有了权威的中心化代理，信息的可信度和准确性便会面临问题。</p><p>问题1：类两军问题</p><p>第一次听说这个问题居然是在TCP的课上，大致说的是有两个相距很远的军队要传递信息，红军派遣一个信使去跟蓝军说：“你他娘的把意大利炮拿出来！”。蓝军收到信息后又派了一个信使去红军说：“收到指令！”。然后红军又派一个信使去蓝军说：“知道你收到指令了！”。然后蓝军又派一个信使去红军说：“知道你知道我收到指令了！”。然后红军又派一个信使去蓝军说：“知道你知道我知道你收到指令了！”……然后就没完没了了。</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/BitCoin-Block-2018-02-26-2.jpg" alt="BitCoin-Block-2018-02-26-1"></p><p>在这种情况下，因为是点对点的通信，双方不可能在这种情况下达到信息的一致性。严谨一点，就是“在分布式计算上，试图在异步系统和不可靠的通道上达到一致性是不可能的”。</p><p>问题2：拜占庭将军问题</p><p>拜占庭罗马帝国在军事行动中，采取将军投票的策略来决定是进攻还是撤退，也就是说如果多数人决定进攻，就上去干。但是军队中如果有奸细（比如将军已经反水故意乱投票，或者传令官叛变擅自修改军令），那怎么保证最后投票的结果真正反映了忠诚的将军的意愿呢？</p><p>拜占庭将军问题反映到信息交换领域中来，可以理解为在一个去中心的系统中，有一些节点是坏掉的，它们可能向外界广播错误的信息或者不广播信息，在这种情况下如何验证数据传输的准确性。</p><p><strong>区块链技术的诞生</strong></p><p>现在让我们来一步一步在去中心化的系统中解决这些问题，见证区块链技术雏形的诞生。</p><p>1</p><p>我们先来建立一个去中心化的系统，为了方便理解，我们来看一个简单的去中心化借贷模型：如果A借了B 100块钱，这个时候，A在人群中大喊“我是A，我借给了B 100块钱！”，B也在人群中大喊“我是B，A借给了我100块钱！”，此时路人甲乙丙丁都听到了这些消息，因此所有人都在心中默默记下了“A借给了B100块钱”。你看，这个时候一个去中心化的系统就建立起来了，这个系统中不需要银行，也不需要借贷协议和收据，严格来说，甚至不需要人与人长久的信任关系（比如B突然又改口说“我不欠A钱！”，这个时候人民群众就会站出来说“不对，我的小本本上记录了你某天借了A100块钱！”）。</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/BitCoin-Block-2018-02-26-3.jpg" alt="BitCoin-Block-2018-02-26-1"></p><p>可能你已经发现了，在上述的模型中，所谓的“100块钱”已经不重要了。换句话说，任何东西都可以在这个模型中交换，甚至你可以凭空杜撰一个东西，只要大家承认，你就可以让你杜撰的东西流通。比如：我在人群中高喊一声“我创造了10个查克拉！”，我甚至不需要知道查克拉是什么，也不需要关心世界上是不是真的有查克拉，只要大家都听到，然后在自己的小本本上记下“LaiW3n有10个查克拉”，于是我就真的有100个查克拉了。从此以后，我便可以声称我给了某人1个查克拉，只要路人甲乙丙丁都收到并且承认了这一信息，那我就算完成了这次交易，哪怕世界上没有查克拉。</p><p>你现在脑海中是不是浮现出了三个字——“比特币”？由于真正的区块链和比特币比我上述的模型复杂太多，细节也丰富太多，因此以下还是以查克拉举例，毕竟本文是Blockchain for Babies.（笑）</p><p>假设过了很长一段时间，我凭空创造的查克拉已经在这个系统中流通了起来，大家都开始认可了查克拉。但是这个系统中一共就只有10个查克拉，于是有人动了坏心思，他在人群中高呼“我有10个查克拉！”怎么办？大家是直接在本本上记下他有10个查克拉么，这样不是人人都可以伪造查克拉了么？</p><p>为了防止这种现象发生，我决定在我创造查克拉的时候给我的查克拉打上标记（更准确地说，我是给我喊的那句“我创造了10个查克拉”打上标记，比如标记为001），这样以后在每一笔交易的时候，我在高喊“我给了某某1个查克拉！”的时候，会附加上额外的一句话：“这1个查克拉的来源是记为001的那条记录，我的这句话标记为002！”。我们再抽象一点，某人喊话的内容的格式就变成了：“这句话编号xxx，上一句话的编号是yyy，我给了某某1个查克拉！”，这样就解决了伪造的问题。其实上述模型就变成一个简化的中本聪第一版比特币区块链协议：</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/BitCoin-Block-2018-02-26-4.jpg" alt="BitCoin-Block-2018-02-26-1"></p><p>好了，看到这里你基本已经能够生动形象又不涉及任何细节地向你的弱智室友解释区块链了。但是也许你的室友是一个有打破沙锅问到底精神求是学子，因此你最好继续准好回答以下这几个问题。</p><h3 id="1-“凭啥？”"><a href="#1-“凭啥？”" class="headerlink" title="1. “凭啥？”"></a>1. “凭啥？”</h3><p>你室友可能会问：“凭啥你喊一句话我就帮你记？我的小本本不要钱么？”。为了激励大家帮我传话和记账，我决定给第一个听到我喊话并且记录在小本本上的人一些奖励：第一个听到我喊话并记录下来的人，你就凭空得到了1个查克拉，这个查克拉是整个系统对你幸苦记账的报酬，而你记录了这句话之后，要马上告诉其它人你已经记录好了，让别人放弃继续记录这句话，并给你自己的记录编号让别人有据可查，然后你再把我的话加上你的记录编号一起喊出来，供下一个人记账。</p><p>当这个规则定下以后，这个系统中一定会出现一批人，他们开始竖着耳朵监听周围发出的声音，以抢占第一个记账的权利。对的，你脑海中是不是又浮现出了“比特币挖矿”的字眼？</p><p>值得一提的是，关于比特币挖矿， </p><p><a href="http://www.zhihu.com/people/39e1a1e41b3903f9283e13d11a39bbfd" target="_blank" rel="noopener">@玲珑邪僧</a></p><blockquote><p>单身汪们要找女票，国民岳母说我有好多女儿，这样吧我给你们出点题目，解出一个就给其中一个姑娘的微信号。</p><p>单身汪们疯狂竞争，想破脑袋去解题。只要其中一只汪解出一道题，就立马得意洋洋地昭告天下，示威全部单身汪，这个姑娘是我的啦，你们放弃吧。其他单身汪们即使不服也没有办法，惆怅懊恼也不是个事儿啊，还是麻溜地立马去解下一道题目吧。这只喜赢姑娘的幸运小汪被岳母认可后还能得到25个货币单位的彩礼，简直人生赢家。</p></blockquote><h3 id="2-“听谁的？”"><a href="#2-“听谁的？”" class="headerlink" title="2. “听谁的？”"></a>2. “听谁的？”</h3><p>在这个系统中，如果我和另一个人C几乎同时地喊出一句：“为了艾泽拉斯！”。由于听众所处的位置不同，一定会有人先听到我说的那句话，而另外一些人则先听到C的那句话，如果我们规定只能有一个人说出这句话，那到底这句话是谁说的？</p><p>如果不加任何条件，那么上述的情况一定会这样发展：一部分人认为这句话是我说的，在听到这句话之后开始记账，之后他们所做的所有事情都是基于这个事实，并且随着这个信息一次次的传下去，这条信息链会越来越深；而另外一群认为是C先说这句话的人，也会按照这样的趋势发展。这样，原本是一条唯一的信息链，在我们喊出“为了艾泽拉斯”这句话之后，分叉了！？</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/BitCoin-Block-2018-02-26-5.jpg" alt="BitCoin-Block-2018-02-26-1"></p><p>图5：“区块链”分叉</p><p>这会导致怎样的情况呢？按照我们的设想，应该每个人的小本本上记录的东西都是一样的，都是一条可以把所有信息串联起来的链条。但是在这一刻，他们小本本上记录的东西不一样了！这还玩毛啊？以后还怎么确定交易和信息的真实性！？</p><p>为了解决这个问题，我又追加了新的规则：每个人在记录小本本的时候，需要脱鞋然后用脚拿笔，在小本本上用正楷体书写！有了这个规定，由于用脚写字难度很大，每个人至少需要10分钟才能写完，而且由于每个人用脚写字的熟练度不通，写完这句话所用的时间也不同，因此一定会有人先写完然后高呼“我写完了！那句话是LaiW3n喊的！”，这样其它正在写这句话的人便会停笔，然后在小本本上重新开始写“那句话是来文写的，上一句的编号是xxx”。</p><p>如果你对上述我的解决方法感兴趣，你可以对照我上面的比喻去了解以下知识：</p><p>“听谁的”——中本聪破解“拜占庭将军问题”的算法</p><p>“在小本本上记录”——比特币挖矿</p><p>“脱鞋用脚写字”——比特币挖矿难度</p><p>“脱鞋写字速度”——算力</p><p>“新的规则”——工作量证明链</p><h3 id="3-“双花”问题"><a href="#3-“双花”问题" class="headerlink" title="3. “双花”问题"></a>3. “双花”问题</h3><p>这个时候你的室友可能又要问：如果我同时宣布我给了A一个查克拉和我给了B一个查克拉，但是我只有一个查克拉，那咋整？是A和B都收到了查克拉还是咋地？</p><p>这个时候你只需要托起他的下巴，温柔地看着他的眼睛，用手刮刮他的鼻子，说：“小妖精，你把这种情况带到上面的规则中去试试？”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;注明：这是一篇转载文章，感谢原创作者&lt;/p&gt;
&lt;p&gt;原link：&lt;a href=&quot;https://www.zhihu.com/question/37290469/answer/107612456&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;区块链是什么，如何简单易懂地介绍区块链？ - 汪乐-LaiW3n&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前比特币和区块链貌似有点火，研究一波，这里贴一篇知乎上的链接，记录下来。&lt;/p&gt;
    
    </summary>
    
      <category term="Reprint" scheme="sherry0429.github.io/categories/Reprint/"/>
    
    
      <category term="BitCoin" scheme="sherry0429.github.io/tags/BitCoin/"/>
    
  </entry>
  
  <entry>
    <title>如何便捷的在Hexo博客中插入图片</title>
    <link href="sherry0429.github.io/2018/02/25/%E5%A6%82%E4%BD%95%E4%BE%BF%E6%8D%B7%E7%9A%84%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>sherry0429.github.io/2018/02/25/如何便捷的在博客中插入图片/</id>
    <published>2018-02-25T07:37:06.000Z</published>
    <updated>2018-02-26T02:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>直接上干货，最好的实现当然是：</p><ul><li>在blog里贴本地link</li><li>hexo g的时候自动转化为oss的link并上传</li><li>hexo g的时候将blog里的local link转化为oss link</li></ul><p>我找了下这方面的插件，因为我用的是腾讯云的OSS，没有找到对应插件，想自己实现，但无奈nodejs太过垃圾。。</p><p>那么是不是就没有办法呢，倒也不是。</p><p>经过我的思考，我决定这样做：</p><ul><li>在Typora里直接放入本地图片，观察效果</li><li>开启Typora的“插入图片时使用相对路径功能”</li><li>开启Typora的“插入图片时拷贝到指定文件夹”功能</li><li>写一个python脚本，将指定文件夹的图片全部上传至OSS</li></ul><p>实际使用时，则这样：</p><ul><li>写博客，插入图片（本地），观察效果</li><li>跑一遍python脚本</li><li>全文替换博客中所有图片的前缀为OSS前缀</li><li>部署</li></ul><p>下面两张图，就是用这种方式上传的图片</p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/upload_oss_step_1.jpg" alt="upload_oss_step_1"></p><p><img src="https://blogimage-1253148269.cos.ap-chengdu.myqcloud.com/upload_oss_step_2.jpg" alt="upload_oss_step_2"></p><p>关于python脚本的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Copyright (C) 2017 tianyou pan &lt;sherry0429 at SOAPython&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosConfig</span><br><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosS3Client</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadOSSClass</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    secret_id = <span class="string">''</span>  <span class="comment"># 替换为用户的secret_id</span></span><br><span class="line">    secret_key = <span class="string">''</span>  <span class="comment"># 替换为用户的secret_key</span></span><br><span class="line">    region = <span class="string">''</span>  <span class="comment"># 替换为用户的region</span></span><br><span class="line">    token = <span class="string">''</span>  <span class="comment"># 使用临时秘钥需要传入Token，默认为空,可不填</span></span><br><span class="line">    config = CosConfig(Region=region, Secret_id=secret_id, Secret_key=secret_key, Token=token)  <span class="comment"># 获取配置对象</span></span><br><span class="line">    client = CosS3Client(config)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.redis_c = redis.StrictRedis(<span class="string">"localhost"</span>, <span class="number">6379</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">upload_img</span><span class="params">(self, file_name)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(file_name, <span class="string">'rb'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            response = self.client.put_object(</span><br><span class="line">                Bucket=<span class="string">''</span>,  <span class="comment"># Bucket由bucketname-appid组成</span></span><br><span class="line">                Body=fp,</span><br><span class="line">                Key=file_name,</span><br><span class="line">                StorageClass=<span class="string">'STANDARD'</span>,</span><br><span class="line">                CacheControl=<span class="string">'no-cache'</span>,</span><br><span class="line">                ContentDisposition=<span class="string">'download.txt'</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">if</span> response[<span class="string">'ETag'</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"upload success : "</span>,</span><br><span class="line">            <span class="keyword">print</span> response[<span class="string">'ETag'</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"upload failed"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_cache</span><span class="params">(self, img_path)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.redis_c.sadd(<span class="string">'blog-img'</span>, img_path)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">"."</span>):</span><br><span class="line">            <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">                img_path = os.path.join(root, name)</span><br><span class="line">                <span class="keyword">print</span> (<span class="string">"upload : "</span> + img_path)</span><br><span class="line">                <span class="keyword">if</span> self.make_cache(img_path):</span><br><span class="line">                    self.upload_img(name)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"upload done"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    upload_c = UploadOSSClass()</span><br><span class="line">    upload_c.start()</span><br></pre></td></tr></table></figure><p>自行添加对应字段。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo部署，如果使用GitPages，不得不面对上传图片过多时超过github.io库限制的问题，而使用OSS，又需要先上传到OSS，再在blog里引用链接，&lt;/p&gt;
&lt;p&gt;有没有一种办法，写博客时插入图片，所见即所得，部署后，博客也自动采用OSS上的链接呢？&lt;/p&gt;
&lt;p&gt;这里提供一种思路和实现&lt;/p&gt;
    
    </summary>
    
      <category term="knowledge" scheme="sherry0429.github.io/categories/knowledge/"/>
    
    
      <category term="hexo" scheme="sherry0429.github.io/tags/hexo/"/>
    
      <category term="python" scheme="sherry0429.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>快速开发scrapy爬虫(二)</title>
    <link href="sherry0429.github.io/2018/02/25/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91scrapy%E7%88%AC%E8%99%AB-%E4%BA%8C/"/>
    <id>sherry0429.github.io/2018/02/25/快速开发scrapy爬虫-二/</id>
    <published>2018-02-25T07:19:43.000Z</published>
    <updated>2018-02-26T02:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>首先我们回顾一下上一节说过的爬虫步骤：</p><ul><li>找出需求中属于静态网页数据（即查看网页源码就能获取的内容）</li><li>找出需求中属于动态加载的数据（通过Chrome开发者工具的NetWork面板）</li><li>判断爬虫实现难度（主要在动态加载部分上，如果动态加载部分的请求URL过于难拼，考虑放弃该字段，没办法放弃就硬啃吧，做好心理准备和工期规划）</li><li>构造静态网页数据的爬取规则</li><li>构造动态加载数据的请求URL</li><li>实现爬虫</li></ul><p>上一节，我们走完了前4个步骤，这篇文章主要讲如何实现第五个步骤。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先通过chrome的开发者工具，NETWORK面板搜XHR请求，可以发现在加载商品详情页时有如下请求：</p><p><a href="https://www.amazon.cn/gp/product-description/ajaxGetProuductDescription.html?ref_=dp_apl_pc_loaddesc&amp;asin=B002WC7NGS&amp;cacheTime=1519547354719&amp;merchantId=A1AJ19PSB66TGU&amp;deviceType=web" target="_blank" rel="noopener">https://www.amazon.cn/gp/product-description/ajaxGetProuductDescription.html?ref_=dp_apl_pc_loaddesc&amp;asin=B002WC7NGS&amp;cacheTime=1519547354719&amp;merchantId=A1AJ19PSB66TGU&amp;deviceType=web</a></p><p>分析可知它需要如下几个参数：</p><ol><li>asin</li><li>cacheTime</li><li>merchantId</li><li>deviceType</li></ol><p>asin和merchantId通过爬取获得，cacheTime通过unix时间戳获得，deviceType固定为Web.</p><p>上一节我们的代码是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_0</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    info(<span class="string">'Parse 0 '</span>+response.url)</span><br><span class="line">    item = self.parse_with_rules(response, self.css_rules, dict)</span><br><span class="line">    <span class="keyword">if</span> isinstance(item, dict):</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_dict = dict()</span><br><span class="line">        data_dict[<span class="string">'data'</span>] = item</span><br><span class="line">        <span class="keyword">yield</span> data_dict</span><br></pre></td></tr></table></figure><p>现在只需要略微修改爬取规则，然后在item返回之后，取出来所需参数，拼接成一个URL。再发起请求和对应的css规则，在新的method里面进行解析即可。</p><p>还记得上一节，使用css selector的时候不知道如何选择标签内的属性值，在这一节，我使用了先通过css selector获取html标签，再通过正则获取属性的方式。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>首先是新的css规则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">css_rules = &#123;</span><br><span class="line">        <span class="string">"#title"</span>: &#123;</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"#productTitle::text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"#byline"</span>: &#123;</span><br><span class="line">            <span class="string">"author"</span>: <span class="string">".a-link-normal::text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">".bucket&gt;.content"</span>: &#123;</span><br><span class="line">            <span class="string">"base_info_title"</span>: <span class="string">"li&gt;b::text"</span>,</span><br><span class="line">            <span class="string">"base_info_content"</span>: <span class="string">"li::text"</span>,</span><br><span class="line">            <span class="string">"average_star"</span>: <span class="string">".a-icon-alt::text"</span>,</span><br><span class="line">            <span class="string">"sum_comments"</span>: <span class="string">".a-link-normal::text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"#addToCart"</span>:&#123;</span><br><span class="line">            <span class="string">"ASIN"</span>: <span class="string">"#ASIN"</span>,</span><br><span class="line">            <span class="string">"merchantID"</span>: <span class="string">"#merchantID"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">content_css_rules = &#123;</span><br><span class="line">    <span class="string">"#s_contents"</span>:&#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"h3::text"</span>,</span><br><span class="line">        <span class="string">"content"</span>: <span class="string">"p::text"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们在原有规则上添加了#addToCart这个css selector，用于定位ASIN，和merchantID。这两个值爬下来是HTML标签的形式，我们要用正则把它替换为可读形式，再拼接URL发送请求</p><p>下面为关键代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_0</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    info(<span class="string">'Parse 0 '</span>+response.url)</span><br><span class="line">    items = self.parse_with_rules(response, self.css_rules, dict)</span><br><span class="line">    <span class="keyword">if</span> isinstance(items, dict):</span><br><span class="line">        <span class="keyword">yield</span> items</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_dict = dict()</span><br><span class="line">        data_dict[<span class="string">'data'</span>] = items</span><br><span class="line">        <span class="keyword">yield</span> data_dict</span><br><span class="line">    asin = <span class="string">''</span></span><br><span class="line">    merchant = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> base_data <span class="keyword">in</span> items:</span><br><span class="line">        need_params = base_data[<span class="string">'#addToCart'</span>]</span><br><span class="line">        <span class="keyword">for</span> params <span class="keyword">in</span> need_params:</span><br><span class="line">            asin_html = params[<span class="string">'ASIN'</span>]</span><br><span class="line">            asin = self.get_html_attr(asin_html[<span class="number">0</span>], <span class="string">"value"</span>)</span><br><span class="line">            merchant_html = params[<span class="string">'merchantID'</span>]</span><br><span class="line">            merchant = self.get_html_attr(merchant_html[<span class="number">0</span>], <span class="string">"value"</span>)</span><br><span class="line">    unix_time = str(int(time.time() * <span class="number">1000</span>))</span><br><span class="line">    content_url = <span class="string">"https://www.amazon.cn/gp/product-description/ajaxGetProuductDescription.html?ref_=dp_apl_pc_loaddesc&amp;asin=%s&amp;cacheTime=%s&amp;merchantId=%s&amp;deviceType=web"</span> % (asin[<span class="number">0</span>], unix_time, merchant[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">yield</span> Request(url=content_url, callback=self.parse_1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_1</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    info(<span class="string">'Parse 1 '</span>+ response.url)</span><br><span class="line">    items = self.parse_with_rules(response, self.content_css_rules, dict)</span><br><span class="line">    <span class="keyword">if</span> isinstance(items, dict):</span><br><span class="line">        <span class="keyword">yield</span> items</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_dict = dict()</span><br><span class="line">        data_dict[<span class="string">'data'</span>] = items</span><br><span class="line">        <span class="keyword">yield</span> data_dict</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>爬取后的结果为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"#title"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"title"</span>:[</span><br><span class="line">            <span class="string">"数据结构与算法分析:C语言描述(原书第2版)"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"#addToCart"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"ASIN"</span>:[</span><br><span class="line">            <span class="string">"&lt;input type=\"hidden\" id=\"ASIN\" name=\"ASIN\" value=\"B002WC7NGS\"&gt;"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"merchantID"</span>:[</span><br><span class="line">            <span class="string">"&lt;input type=\"hidden\" id=\"merchantID\" name=\"merchantID\" value=\"A1AJ19PSB66TGU\"&gt;"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"#byline"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"author"</span>:[</span><br><span class="line">            <span class="string">"维斯"</span>,</span><br><span class="line">            <span class="string">"冯舜玺"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">".bucket&gt;.content"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"base_info_title"</span>:[</span><br><span class="line">            <span class="string">"出版社:"</span>,</span><br><span class="line">            <span class="string">"丛书名:"</span>,</span><br><span class="line">            <span class="string">"平装:"</span>,</span><br><span class="line">            <span class="string">"语种："</span>,</span><br><span class="line">            <span class="string">"开本:"</span>,</span><br><span class="line">            <span class="string">"ISBN:"</span>,</span><br><span class="line">            <span class="string">"条形码:"</span>,</span><br><span class="line">            <span class="string">" 商品尺寸: "</span>,</span><br><span class="line">            <span class="string">" 商品重量: "</span>,</span><br><span class="line">            <span class="string">"品牌:"</span>,</span><br><span class="line">            <span class="string">"ASIN: "</span>,</span><br><span class="line">            <span class="string">"用户评分:"</span>,</span><br><span class="line">            <span class="string">"亚马逊热销商品排名:"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"average_star"</span>:[</span><br><span class="line">            <span class="string">"平均 4.2 星"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"base_info_content"</span>:[</span><br><span class="line">            <span class="string">" 机械工业出版社; 第1版 (2004年1月1日)"</span>,</span><br><span class="line">            <span class="string">" "</span>,</span><br><span class="line">            <span class="string">" 391页"</span>,</span><br><span class="line">            <span class="string">" 简体中文"</span>,</span><br><span class="line">            <span class="string">" 16"</span>,</span><br><span class="line">            <span class="string">" 711112748X,</span></span><br><span class="line"><span class="string">             9787111127482"</span>,</span><br><span class="line">            <span class="string">" 9787111127482"</span>,</span><br><span class="line">            <span class="string">" 25.7 x 18.3 x 1.8 cm "</span>,</span><br><span class="line">            <span class="string">" 621 g "</span>,</span><br><span class="line">            <span class="string">" 机械工业出版社"</span>,</span><br><span class="line">            <span class="string">"B002WC7NGS"</span>,</span><br><span class="line">            <span class="string">" 图书商品里排第1,</span></span><br><span class="line"><span class="string">            618名 ("</span>,</span><br><span class="line">            <span class="string">") "</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"sum_comments"</span>:[</span><br><span class="line">            <span class="string">" 236 条商品评论 "</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"data"</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"#s_contents"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"content"</span>:[</span><br><span class="line">            <span class="string">" 《数据结构与算法分析:C语言描述(原书第2版)》讨论数据结构和算法分析。数据结构主要研究组织大量数据的方法，而算法分析则是对算法运行时间的评估。随着计算机的速度越来越快，对于能够处理大量输入数据的程序的需求变得日益急切。可是，由于在输入量很大的时候，程序的低效率现象变得非常明显，因此这又要求对效率问题给予更仔细的关注。通过在实际编程之前对算法的分析，学生可以决定一个特定的解法是否可行。例如，学生在《数据结构与算法分析:C语言描述(原书第2版)》中将读到一些特定的问题并看到精心的实现方法是如何把对大量数据的时间限制从16年减至不到1秒的。因此，若无运行时间的阐释，就不会有算法和数据结构的提出。"</span>,</span><br><span class="line">            <span class="string">"《数据结构与算法分析:C语言描述(原书第2版)》是国外数据结构与算法分析方在的标准教材，介绍了数据结构（大量数据的组织方法）以及算法分析（算法运行时间的估算）。《数据结构与算法分析:C语言描述(原书第2版)》的编写目标是同时廛授好的程序设计和算法分析技巧，使读者可以开发出具有高效率的程序。"</span>,</span><br><span class="line">            <span class="string">"《数据结构与算法分析:C语言描述(原书第2版)》可作为高级数据结构课程或研究生一年级算法分析课程的教材，使用《数据结构与算法分析:C语言描述(原书第2版)》需具有一些中级程序设计知识，还需要离散数学的一些背景知识。"</span>,</span><br><span class="line">            <span class="string">"随着速度的不断提高和存储容量的持续增长，计算机的功能日益强大，从而处理数据和解决问题的规模和复杂程度与日俱增。这不仅带来了需要认真研究的新课题，而且突出了原有数据结构和算法效率低下的缺点。程序的效率问题不是由于计算机功能的强大而受到冷落，相反地，倒是被人们提到前所未有的重视程度，因为大型问题的解决所涉及到的大容量存储和高速度运算容不得我们对效率有丝毫的忽视。《数据结构与算法分析:C语言描述(原书第2版)》正是在阐述数据结构基本概念的同时深入地分析了算法的效率。 "</span>,</span><br><span class="line">            <span class="string">" 作者：（美国）维斯 译者：冯舜玺"</span>,</span><br><span class="line">            <span class="string">"Mark Allen Weiss是佛罗里达国际大学计算机学院教授，普林斯顿大学计算机科学博士。除本书外，他编写的关于数据结构与算法方面的知名教材还有：Data Structures and Algorithm Analysis：in Java,</span></span><br><span class="line"><span class="string">             Data Structures and Algonthm Analysis：in C++以及Data Structures and Problem Solving：Using Jave、Data Struchures and Problem Solving：Using C++等。他目前是AP考试计算机学科委员会的主席。 "</span>,</span><br><span class="line">            <span class="string">" 出版者的话"</span>,</span><br><span class="line">            <span class="string">"专家指导委员会"</span>,</span><br><span class="line">            <span class="string">"译者序"</span>,</span><br><span class="line">            <span class="string">"前言 "</span>,</span><br><span class="line">            <span class="string">"第1章 引论"</span>,</span><br><span class="line">            <span class="string">"第2章 算法分析"</span>,</span><br><span class="line">            <span class="string">"第3章 表、栈和队列"</span>,</span><br><span class="line">            <span class="string">"第4章 树"</span>,</span><br><span class="line">            <span class="string">"第5章 散列"</span>,</span><br><span class="line">            <span class="string">"第6章 优先队列（堆）"</span>,</span><br><span class="line">            <span class="string">"第7章 排序"</span>,</span><br><span class="line">            <span class="string">"第8章 不相交集AD"</span>,</span><br><span class="line">            <span class="string">"第9章 图论算法"</span>,</span><br><span class="line">            <span class="string">"第10章 算法设计技巧"</span>,</span><br><span class="line">            <span class="string">"第11章 摊还分析"</span>,</span><br><span class="line">            <span class="string">"第12章 高级数据结构及其实现"</span>,</span><br><span class="line">            <span class="string">"索引 "</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"name"</span>:[</span><br><span class="line">            <span class="string">"编辑推荐"</span>,</span><br><span class="line">            <span class="string">"作者简介"</span>,</span><br><span class="line">            <span class="string">"目录"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>值得注意的是，这是两条记录，因此，我们需要在pipeline里面对它进行合并。</p><p>最简单的方式，就是使用Redis，给这些数据一个main<em>key（data-ASIN），</em>把这个main_key作为redis_key，把数据使用hset存入。</p><p>最后，为了减轻被爬取网站的压力，我建议将settings.py中的对应选项改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOAD_DELAY = <span class="number">5</span></span><br><span class="line">CONCURRENT_REQUESTS_PER_DOMAIN = <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇，这一篇将如何实现爬取动态加载的数据&lt;/p&gt;
    
    </summary>
    
      <category term="knowledge" scheme="sherry0429.github.io/categories/knowledge/"/>
    
    
      <category term="python" scheme="sherry0429.github.io/tags/python/"/>
    
      <category term="spider" scheme="sherry0429.github.io/tags/spider/"/>
    
      <category term="scrapy" scheme="sherry0429.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>hexo部署突然失败的一次解决</title>
    <link href="sherry0429.github.io/2018/02/25/hexo%E9%83%A8%E7%BD%B2%E7%AA%81%E7%84%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E4%B8%80%E6%AC%A1%E8%A7%A3%E5%86%B3/"/>
    <id>sherry0429.github.io/2018/02/25/hexo部署突然失败的一次解决/</id>
    <published>2018-02-25T06:46:25.000Z</published>
    <updated>2018-03-06T11:31:34.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>春节过后，重新写blog提交，发现hexo d没问题，但hexo g则出现如下错误：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fatal: HttpRequestException encountered.</span><br><span class="line">   ▒▒▒▒▒▒▒▒ʱ▒▒▒▒</span><br><span class="line">bash: /dev/tty: No such device <span class="keyword">or</span> address</span><br><span class="line">error: <span class="function">failed to execute prompt <span class="title">script</span> <span class="params">(<span class="built_in">exit</span> code <span class="number">1</span>)</span></span></span><br><span class="line">fatal: could not read Username for 'https://github.com': No error</span><br><span class="line">FATAL Something's wrong. Maybe you can find the solution here: http:<span class="comment">//hexo.io/do                                                                                                                                                                                               cs/troubleshooting.html</span></span><br><span class="line">Error: fatal: HttpRequestException encountered.</span><br><span class="line">   ��������ʱ������</span><br><span class="line">bash: /dev/tty: No such device <span class="keyword">or</span> address</span><br></pre></td></tr></table></figure><p>一开始我以为是因为配置文件的问题，确认后发现并不是这样。没有改动过，为什么以前可以，现在却不行了呢？</p><p>然鹅，即使我现在解决了，我也不知道为什么这个问题出现，因为从上次成功提交blog到出现这个问题为止，这台电脑并没有被动过。</p><p>唯一可能的原因大概是提交的时候，<strong><em>我在hexo d的时候ctrl+c强行终止了</em></strong>。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>github上有一个<a href="https://github.com/hexojs/hexo/issues/1495" target="_blank" rel="noopener">issue</a></p><p>这里对younglaker的回答做一下引用：</p><hr><p>I try SSH instead HTTPS, it works. If you still have problem with HTTPS, try this command:</p><p>ssh -T git@github.com</p><hr><p>我使用的是windows，在power shell 下无此命令，在git bash下可以使用，但会报出如下错误：</p><hr><p>Warning: Permanently added the RSA host key for IP address ‘(随机IP)’ to th                                                                                                                                                                                               e list of known hosts.<br>sherry0429@github.com: Permission denied (publickey).</p><hr><p>在cmd下ping报出的ip，也无法ping通，上VPN也没用。</p><p>这里的原因我个人推测，ip不是原因，原因是permisson denied，即本机的ssh无法和github的ssh配对。<a href="https://help.github.com/articles/error-permission-denied-publickey/" target="_blank" rel="noopener">这里GitHub官方给出了对这个问题的分析步骤和解决方案</a></p><p>我看过以后依次尝试，最终打算简单粗暴：</p><p><strong><em>重新生成ssh</em></strong></p><p>下面说步骤。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h4 id="删除原SSH"><a href="#删除原SSH" class="headerlink" title="删除原SSH"></a>删除原SSH</h4><ol><li>找见本机存放ssh的地方<ul><li>在gitbash中输入<strong>ssh -vT git@github.com</strong></li><li>在一大串debug信息中找到Offering public key: … /c/Users/username/.ssh/id_rsa</li><li>这里的.ssh就是存放ssh的地方</li></ul></li><li>删除掉本机的ssh</li><li>利用命令重新生成ssh<ul><li>在gitbash中 输入： <strong>ssh-keygen -t rsa -C “youremail@example.com”</strong></li><li>密码可以不用输，一路回车即可创建</li></ul></li></ol><h4 id="关联新SSH"><a href="#关联新SSH" class="headerlink" title="关联新SSH"></a>关联新SSH</h4><ol><li>修改github账号settings内的ssh选项__<ul><li>此时去先前存ssh的地方，可以看到有一个文件id_rsa.pub，用notepad++打开，复制里面的所有内容</li><li>登录github账号，右上角settings-&gt;SSH and GPG Keys</li><li>New SSH Keys，把前面复制的id_rsa.pub的内容复制进去，给这个ssh key取个名</li></ul></li><li><strong>修改hexo的_config.xml</strong><ul><li>将hexo配置文件deploy部分的repo选项修改为你的github.io库的ssh repo地址</li><li>repo ssh地址可以打开repo，在clone or download那个下拉框里，点右上角的use ssh就可以转换到ssh的repo地址</li></ul></li><li><strong>hexo clean, hexo g, hexo d</strong><ul><li>因为修改了_config.xml，clean一下比较好</li></ul></li><li>it’s works !</li></ol><h2 id="Linux-下"><a href="#Linux-下" class="headerlink" title="Linux 下"></a>Linux 下</h2><p>Linux下步骤也是类似的，不过考虑到真正的生产环境中，ssh-key可能不止一个，不要全删了…仔细分辨之后在进行处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;春节放完假回来再hexo提交时出现的问题，这里记录一下解决方式。&lt;/p&gt;
    
    </summary>
    
      <category term="knowledge" scheme="sherry0429.github.io/categories/knowledge/"/>
    
    
      <category term="hexo" scheme="sherry0429.github.io/tags/hexo/"/>
    
      <category term="bugs" scheme="sherry0429.github.io/tags/bugs/"/>
    
  </entry>
  
  <entry>
    <title>快速开发scrapy爬虫</title>
    <link href="sherry0429.github.io/2018/02/24/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91scrapy%E7%88%AC%E8%99%AB/"/>
    <id>sherry0429.github.io/2018/02/24/快速开发scrapy爬虫/</id>
    <published>2018-02-24T02:22:53.000Z</published>
    <updated>2018-02-25T07:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先介绍一下项目来源：</p><p><a href="https://github.com/geekan/scrapy-examples" target="_blank" rel="noopener">https://github.com/geekan/scrapy-examples</a></p><p>这个项目的开发者和维护者不是我，这里感谢该项目的contributors，因为需求，现在需要开发一个具体的书籍内容爬取爬虫，但迫于时间关系，想直接通过快速修改来获取自己能使用的爬虫，在github上找到了这个轮子。</p><h2 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h2><p>代码中除了各个网站的实例外，有一个<a href="https://github.com/geekan/scrapy-examples/tree/master/misc" target="_blank" rel="noopener">misc</a>的module，在这个module里可以看到底层CommonSpider的实现。</p><p>在CommonSpider类中，可以看到下面这个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, sel, rules, item_class, force_1_item)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> sel <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    items = []</span><br><span class="line">    <span class="keyword">if</span> item_class != dict:</span><br><span class="line">        self.traversal(sel, rules, item_class, <span class="keyword">None</span>, items)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.traversal_dict(sel, rules, item_class, <span class="keyword">None</span>, items, force_1_item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> items</span><br></pre></td></tr></table></figure><p>DFS即深度优先搜索，再联系该类的css_ruls注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''' # css rule example:</span></span><br><span class="line"><span class="string">all_css_rules = &#123;</span></span><br><span class="line"><span class="string">    '.zm-profile-header': &#123;</span></span><br><span class="line"><span class="string">        '.zm-profile-header-main': &#123;</span></span><br><span class="line"><span class="string">            '__use':'dump',</span></span><br><span class="line"><span class="string">            'name':'.title-section .name::text',</span></span><br><span class="line"><span class="string">            'sign':'.title-section .bio::text',</span></span><br><span class="line"><span class="string">            'location':'.location.item::text',</span></span><br><span class="line"><span class="string">            'business':'.business.item::text',</span></span><br><span class="line"><span class="string">            'employment':'.employment.item::text',</span></span><br><span class="line"><span class="string">            'position':'.position.item::text',</span></span><br><span class="line"><span class="string">            'education':'.education.item::text',</span></span><br><span class="line"><span class="string">            'education_extra':'.education-extra.item::text',</span></span><br><span class="line"><span class="string">        &#125;, '.zm-profile-header-operation': &#123;</span></span><br><span class="line"><span class="string">            '__use':'dump',</span></span><br><span class="line"><span class="string">            'agree':'.zm-profile-header-user-agree strong::text',</span></span><br><span class="line"><span class="string">            'thanks':'.zm-profile-header-user-thanks strong::text',</span></span><br><span class="line"><span class="string">        &#125;, '.profile-navbar': &#123;</span></span><br><span class="line"><span class="string">            '__use':'dump',</span></span><br><span class="line"><span class="string">            'asks':'a[href*=asks] .num::text',</span></span><br><span class="line"><span class="string">            'answers':'a[href*=answers] .num::text',</span></span><br><span class="line"><span class="string">            'posts':'a[href*=posts] .num::text',</span></span><br><span class="line"><span class="string">            'collections':'a[href*=collections] .num::text',</span></span><br><span class="line"><span class="string">            'logs':'a[href*=logs] .num::text',</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">    &#125;, '.zm-profile-side-following': &#123;</span></span><br><span class="line"><span class="string">        '__use':'dump',</span></span><br><span class="line"><span class="string">        'followees':'a.item[href*=followees] strong::text',</span></span><br><span class="line"><span class="string">        'followers':'a.item[href*=followers] strong::text',</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>我想大家都会有一个推测，即通过dfs来搜索css_rules，根据css selector来定位到某个元素，然后爬取指定位置的数据。</p><p>以往scrapy直接使用的话，需要parse到html后，自己依次用正则，或者Xpath等技术把想要的数据抽取下来，交给下个部分。是一系列顺序代码。这里通过使用dfs，将数据抽取的部分模板化了。</p><p>那么弄明白了核心逻辑，接下来我们就可以尝试修改这个代码，我现在修改的是<a href="https://github.com/geekan/scrapy-examples/tree/master/amazonbook" target="_blank" rel="noopener">amazon_book</a>这个module。</p><h2 id="架构分析"><a href="#架构分析" class="headerlink" title="架构分析"></a>架构分析</h2><p>scrapy具体的架构就不再细说，从项目结构上看，</p><ul><li>items.py定义了爬取下来存储的数据的基本结构</li><li>pipelines将数据持久化到了redis中</li><li>settings定义了scrapy的设置</li><li><a href="https://github.com/geekan/scrapy-examples/blob/master/misc/spider.py" target="_blank" rel="noopener">spider.py</a>则调用了misc中CommonSpider的具体函数</li></ul><p>因此，我们如果需要快速模板化一个网站去爬取，那么只需要修改amazon_book中spider.py中的css_rules就可以了</p><p>如果我们需要修改爬取的具体行为，或者中间件，代理代理设置等，则需要去<a href="https://github.com/geekan/scrapy-examples/tree/master/misc" target="_blank" rel="noopener">misc</a>这个module中去寻找。</p><h2 id="开始动手"><a href="#开始动手" class="headerlink" title="开始动手"></a>开始动手</h2><p>那么现在直接从对这个爬虫的具体修改讲起。</p><p>首先说需求，我需要爬取amazon中某个具体book详情页的：</p><ul><li>名称</li><li>isbn号</li><li>价格</li><li>概述</li><li>试读</li><li>热门/畅销榜单</li></ul><p>那么这里直接打开一个amazon的书籍页面开始分析，我们以<a href="https://www.amazon.cn/dp/B002WC7NGS/ref=sr_1_2?ie=UTF8&amp;qid=1519440234&amp;sr=8-2&amp;keywords=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">数据结构与算法分析:C语言描述(原书第2版)</a>这本经典的书开始。</p><p>具体细节也不再详细说明，只说一下大概步骤：</p><ul><li>找出需求中属于静态网页数据（即查看网页源码就能获取的内容）</li><li>找出需求中属于动态加载的数据（通过Chrome开发者工具的NetWork面板）</li><li>判断爬虫实现难度（主要在动态加载部分上，如果动态加载部分的请求URL过于难拼，考虑放弃该字段，没办法放弃就硬啃吧，做好心理准备和工期规划）</li><li>构造静态网页数据的爬取规则</li><li>构造动态加载数据的请求URL</li><li>实现爬虫</li></ul><p>这里我直接给出前五步的结果，然后开始实现爬虫。</p><p>通过分析页面可知：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">allowed_domains = [&quot;amazon.cn&quot;, &quot;www.amazon.cn&quot;]</span><br><span class="line">start_urls = [</span><br><span class="line">    &quot;https://www.amazon.cn/dp/B002WC7NGS&quot;,</span><br><span class="line">]</span><br><span class="line">rules = [</span><br><span class="line">    Rule(sle(allow=(&quot;/dp/B002WC7NGS&quot;)), callback=&apos;parse_0&apos;, follow=True),</span><br><span class="line">]</span><br><span class="line">css_rules = &#123;</span><br><span class="line">    &quot;#title&quot;: &#123;</span><br><span class="line">        &quot;title&quot;: &quot;#productTitle::text&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;#byline&quot;: &#123;</span><br><span class="line">        &quot;author&quot;: &quot;.a-link-normal::text&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;.bucket&gt;.content&quot;: &#123;</span><br><span class="line">        &quot;base_info_title&quot;: &quot;li&gt;b::text&quot;,</span><br><span class="line">        &quot;base_info_content&quot;: &quot;li::text&quot;,</span><br><span class="line">        &quot;average_star&quot;: &quot;.a-icon-alt::text&quot;,</span><br><span class="line">        &quot;sum_comments&quot;: &quot;.a-link-normal::text&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于css规则如何写可以看：<a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">css_selector</a></p><p>值得注意的是，这个爬虫的实现中，调用parse_0返回的是一个list格式的数据，我们把它修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_0</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    info(<span class="string">'Parse 0 '</span>+response.url)</span><br><span class="line">    item = self.parse_with_rules(response, self.css_rules, dict)</span><br><span class="line">    <span class="keyword">if</span> isinstance(item, dict):</span><br><span class="line">        <span class="keyword">yield</span> item</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_dict = dict()</span><br><span class="line">        data_dict[<span class="string">'data'</span>] = item</span><br><span class="line">        <span class="keyword">yield</span> data_dict</span><br></pre></td></tr></table></figure><p>注意三个地方：</p><ul><li>parse_with_rules的第三个参数是dict，表明我们希望爬取的数据以dict类型存储，但如果有多条，则会是list类型的dict</li><li>使用yield而不是return，否则爬取到数据会立刻结束爬虫，无法执行pipelines的逻辑</li><li>先判断返回的item是dict还是list</li></ul><p>修改好以上部分后，就可以执行代码了，我们在amazonbook目录下打开shell输入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl amazonbook</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>接下来可以看到shell下输出一堆信息，默认的情况下，会使用自带的JsonPipeline，可以看到amazonbook下出现了一个data_utf8.json的文件，以下为我爬取的样例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"data"</span>: [&#123;</span><br><span class="line">  <span class="attr">"#title"</span>: [&#123;</span><br><span class="line">    <span class="attr">"title"</span>: [<span class="string">"数据结构与算法分析:C语言描述(原书第2版)"</span>]&#125;], </span><br><span class="line">  <span class="attr">"#byline"</span>: [&#123;<span class="attr">"author"</span>: [<span class="string">"维斯"</span>, <span class="string">"冯舜玺"</span>]&#125;], </span><br><span class="line">  <span class="attr">".bucket&gt;.content"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="attr">"base_info_title"</span>: [<span class="string">"出版社:"</span>, <span class="string">"丛书名:"</span>, <span class="string">"平装:"</span>, <span class="string">"语种："</span>, <span class="string">"开本:"</span>, <span class="string">"ISBN:"</span>, <span class="string">"条形码:"</span>, <span class="string">" 商品尺寸: "</span>, <span class="string">" 商品重量: "</span>, <span class="string">"品牌:"</span>, <span class="string">"ASIN: "</span>, <span class="string">"用户评分:"</span>, <span class="string">"亚马逊热销商品排名:"</span>], </span><br><span class="line">    <span class="attr">"average_star"</span>: [<span class="string">"平均 4.2 星"</span>], </span><br><span class="line">    <span class="attr">"base_info_content"</span>: [<span class="string">" 机械工业出版社; 第1版 (2004年1月1日)"</span>, <span class="string">" "</span>, <span class="string">" 391页"</span>, <span class="string">" 简体中文"</span>, <span class="string">" 16"</span>, <span class="string">" 711112748X, 9787111127482"</span>, <span class="string">" 9787111127482"</span>, <span class="string">" 25.7 x 18.3 x 1.8 cm "</span>, <span class="string">" 621 g "</span>, <span class="string">" 机械工业出版社"</span>, <span class="string">"B002WC7NGS"</span>, <span class="string">" 图书商品里排第2,331名 ("</span>, <span class="string">") "</span>], </span><br><span class="line">    <span class="attr">"sum_comments"</span>: [<span class="string">" 236 条商品评论 "</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]&#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这里只是将了静态数据的爬取，下一节写动态数据的爬取。</p><p>爬虫本身难点并不在爬取上，难点还是在数据清洗，整理，断点续爬等，这里只讲如何应付一些小需求，快速实现。</p><p>同样，在这个轮子上进行修改，修改CommonSpider，也可以达到自己想要达到的功能。比如，不熟悉css的话，可以hack掉CommonSpider，把其中的sel.css改成sel.xpath，再进行适当的调整后，就可以用xpath来进行写解析规则了。</p><p>试了一趟个人感觉，XPath可以定位到某个具体的属性，css目前定位到的是元素，对元素中的属性，似乎无法精确的定位到，查了查没有找见，如果有高手了解，希望不吝赐教。</p><p>本项目的源代码在动态数据的爬取一章结束后会带在章节末尾。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;适合有一定爬虫经验和前端/后端开发经验的人，快速通过github上的scrapy-example，改造出适合自己的爬虫。&lt;/p&gt;
&lt;p&gt;需要的基础知识点为python, scrapy, css selector。&lt;/p&gt;
    
    </summary>
    
      <category term="knowledge" scheme="sherry0429.github.io/categories/knowledge/"/>
    
    
      <category term="python" scheme="sherry0429.github.io/tags/python/"/>
    
      <category term="spider" scheme="sherry0429.github.io/tags/spider/"/>
    
      <category term="scrapy" scheme="sherry0429.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Except Test</title>
    <link href="sherry0429.github.io/2018/02/12/Except-Test/"/>
    <id>sherry0429.github.io/2018/02/12/Except-Test/</id>
    <published>2018-02-12T01:36:13.000Z</published>
    <updated>2018-02-12T03:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>this is articles’s content</p><p>test characters &gt; 300,</p><p>test characters:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">Dima Bilan - Believe me</span><br><span class="line"></span><br><span class="line">Even when the thunder and storm begins </span><br><span class="line">就算电闪雷鸣风暴即将到来的时候 </span><br><span class="line">I&apos;ll be standing stong like a tree in the wind </span><br><span class="line">我也会像风中的大树一样坚定地站立 </span><br><span class="line">Nothing is gonna move this mountain or change my direction </span><br><span class="line">我的方向（愿望）就像大山一样没有什么可以撼动（它） </span><br><span class="line">I&apos;m falling off the sky and I&apos;m all alone </span><br><span class="line">我孤独地从空中坠落 </span><br><span class="line">The courage that&apos;s inside is gonna break my fall </span><br><span class="line">内心深处的勇气将会阻止我的坠落 </span><br><span class="line">Nothing is gonna dim my light within </span><br><span class="line">没有什么可以熄灭我心中的光线（希望） </span><br><span class="line">But if I keep going on it will never be impossible </span><br><span class="line">如果我坚持去做那么没有什么是不可能的 </span><br><span class="line">Not today. </span><br><span class="line">不是今天 </span><br><span class="line">Cause I got something to believe in </span><br><span class="line">因为我有信仰 </span><br><span class="line">As long as I&apos;m breathing </span><br><span class="line">只要我还在呼吸 </span><br><span class="line">There is not a limit to what I can dream </span><br><span class="line">那么我的梦想就永不会有止境 </span><br><span class="line">Cause I got something to believe in </span><br><span class="line">因为我有信仰 </span><br><span class="line">Mission to keep climbing </span><br><span class="line">因为我还有未竟的事业 </span><br><span class="line">Nothing else can stop me if I just believe </span><br><span class="line">如果我相信自己那么就没有什么可以阻止我 </span><br><span class="line">And I believe in me. </span><br><span class="line">我相信自己 </span><br><span class="line"></span><br><span class="line">Even when the world tries to pull me down </span><br><span class="line">就算世界想把我摧毁 </span><br><span class="line">Tell me that I can&apos;t... try to turn me around </span><br><span class="line">告诉我做不到的....试着把我翻转 </span><br><span class="line">I wont let them put my fire out </span><br><span class="line">我不会让他们把我摧毁(燃烧殆尽) </span><br><span class="line">But if I keep going on it will never be impossible </span><br><span class="line">如果我坚持去做那么没有什么是不可能的 </span><br><span class="line">Not today </span><br><span class="line">不是今天 </span><br><span class="line"></span><br><span class="line">Cause I got something to believe in </span><br><span class="line">因为我有信仰 </span><br><span class="line">As long as I&apos;m breathing </span><br><span class="line">只要我还在呼吸 </span><br><span class="line">There is not a limit to what I can dream </span><br><span class="line">那么我的梦想就永不会有止境 </span><br><span class="line">Cause I got something to believe in </span><br><span class="line">因为我有信仰 </span><br><span class="line">Mission to keep climbing </span><br><span class="line">因为我还有未竟的事业 </span><br><span class="line">Nothing else can stop me if I just believe </span><br><span class="line">如果我相信自己那么就没有什么可以阻止我 </span><br><span class="line">And I believe in me. </span><br><span class="line">我相信自己 </span><br><span class="line"></span><br><span class="line">I can do it all, open every door </span><br><span class="line">我可以全部做到,打开所有的门 </span><br><span class="line">Turn unthinkable to reality </span><br><span class="line">化不可能为现实 </span><br><span class="line">You see I can do it all and more </span><br><span class="line">你会看到我可以全部做到 </span><br><span class="line">Believing as long as I&apos;m breathing </span><br><span class="line">(我)相信只要我还在呼吸 </span><br><span class="line">There is not a limit to what I can dream </span><br><span class="line">那么我的梦想就永不会有止境 </span><br><span class="line">Cause I got something to believe in </span><br><span class="line">因为我有信仰 </span><br><span class="line">Mission to keep climbing </span><br><span class="line">因为我还有未竟的事业 </span><br><span class="line">Nothing else can stop me if I just believe </span><br><span class="line">如果我相信自己那么就没有什么可以阻止我 </span><br><span class="line">And I believe in me. </span><br><span class="line">我相信自己</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;this is article’s summary, you can’t see it in content&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="sherry0429.github.io/categories/other/"/>
    
    
      <category term="test" scheme="sherry0429.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>KMP</title>
    <link href="sherry0429.github.io/2018/02/11/KMP/"/>
    <id>sherry0429.github.io/2018/02/11/KMP/</id>
    <published>2018-02-11T07:19:59.000Z</published>
    <updated>2018-02-12T03:46:54.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXN 1000000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXM 100000</span></span><br><span class="line"><span class="keyword">int</span> T[MAXN],P[MAXM],Next[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeNext</span><span class="params">(<span class="keyword">int</span> M)</span><span class="comment">//找到一个匹配位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;M)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span> || P[i]==P[j])</span><br><span class="line">&#123;</span><br><span class="line">            i++,j++;</span><br><span class="line">            <span class="keyword">if</span>(P[i]!=P[j])</span><br><span class="line">Next[i] = j;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">Next[i] = Next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">j = Next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(<span class="keyword">int</span> N,<span class="keyword">int</span> M)</span><span class="comment">//进行匹配</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;N &amp;&amp; j&lt;M)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(T[i]==P[j] || j==<span class="number">-1</span>)</span><br><span class="line">i++,j++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">j = Next[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==M)</span><br><span class="line"><span class="keyword">return</span> i-M+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M,C;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;C);</span><br><span class="line">    <span class="keyword">while</span>(C--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;M);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T[i]);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;P[i]);</span><br><span class="line">        <span class="keyword">if</span>(M&gt;N)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">            MakeNext(M);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,KMP(N,M));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSDN 博客搬家&lt;/p&gt;
    
    </summary>
    
      <category term="code_template" scheme="sherry0429.github.io/categories/code-template/"/>
    
    
      <category term="c" scheme="sherry0429.github.io/tags/c/"/>
    
      <category term="kmp" scheme="sherry0429.github.io/tags/kmp/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode #003 Longest Substring Without Repeating Characters</title>
    <link href="sherry0429.github.io/2018/02/11/LeetCode-003-Longest-Substring-Without-Repeating-Characters/"/>
    <id>sherry0429.github.io/2018/02/11/LeetCode-003-Longest-Substring-Without-Repeating-Characters/</id>
    <published>2018-02-11T06:58:00.000Z</published>
    <updated>2018-02-12T03:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>#003 Longest Substring Without Repeating Characters</p><blockquote><p>Given a string, find the length of the longest substring without repeating characters. For example, the longest substring without repeating letters for “abcabcbb” is “abc”, which the length is 3. For “bbbbb” the longest substring is “b”, with the length of 1.</p><p>Input: abcabccbb<br>Output: 3<br>题意：找到一个字符串中，没有重复字符的最长子串，返回它的长度</p><p>#####思路：</p><ol><li>做一个一维数组HashTable，下标为字符的ASCII码，值为这个字符在字符串中的位置，初始化为-1</li><li>设置一个变量LastPosition表示不重复最长串的第一个元素的下标</li><li>遍历字符串，依次检测该字符是否存在HashTable中，例：<br><code>HashTable[&#39;a&#39;]=-1</code>表示该字符第一次出现。<br><code>HashTable[&#39;a&#39;]=2</code>表示该字符上一次出现的位置在str[2].</li><li>如果第一次出现该字符a，HashTable[‘a’]=字符’a’在字符串中的位置.</li><li>如果已经出现过字符’a’，如果上一次’a’在目前检测串中，则置LastPosition为a的下标（即上一次LastPostion）。否则置LastPosition为当前检测字符的下标（HashTable[temp]）。<br>该下标一定为：<code>LastPosition=std::max(LastPosition,HashTable[temp]);</code></li><li>Max为<code>HashTable[temp]-LastPostion</code>所能得到的最大值<br>| a | b | c | d | a |<br>| – |</li></ol></blockquote><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>5</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p>#####代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> Max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> LastPosition=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> HashTable[<span class="number">255</span>]=&#123;<span class="number">-1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;s.size();i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp=(<span class="keyword">int</span>)s[i];</span><br><span class="line">            <span class="keyword">if</span>(HashTable[temp]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                LastPosition=<span class="built_in">std</span>::max(LastPosition,HashTable[temp]);</span><br><span class="line">            &#125;</span><br><span class="line">            HashTable[temp]=i+<span class="number">1</span>;</span><br><span class="line">            Max=<span class="built_in">std</span>::max(Max,HashTable[temp]-LastPosition);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>#####知识点</p><ol><li>字符串中寻找最长符合要求的子串</li><li>难点：当检测到重复字符时，应该从何处继续检测</li><li>还有一种DP解法如下，其实上面的代码也是DP，DP指通过状态转移来解决问题的一种思路，每一种状态的决定总是与上一次状态有联系，以下代码中，Flag数组就是一种记录状态，而Longest每次依赖于上一次Longest还有Flag数组中的状态，因此说这种解决思路是一种DP思路。这个代码由LeetCode上的prime_tang所写，此处为引用。我询问后，他对DP思路的描述原文如下：<blockquote><p>In my understanding, the dynamic programming is: every decision depends on the current status, and immediately cause the transfer of status. In this problem, flag is the status, and we can get the longest every time depends on the previous longest and the flag, so I think it also can be seen as DP solution, even though not obvious compared to the Maximum Subarray problem.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; flag(<span class="number">256</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, longest = <span class="number">0</span>, len = s.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != len; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag[s[i]] &gt;= start) &#123;</span><br><span class="line">                longest = <span class="built_in">std</span>::max(longest, i - start);</span><br><span class="line">                start = flag[s[i]] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            flag[s[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::max(longest, len - start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSDN 博客搬家&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="sherry0429.github.io/categories/algorithm/"/>
    
    
      <category term="c" scheme="sherry0429.github.io/tags/c/"/>
    
      <category term="leetcode" scheme="sherry0429.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode #002 Add Two Numbers</title>
    <link href="sherry0429.github.io/2018/02/11/LeetCode-002-Add-Two-Numbers/"/>
    <id>sherry0429.github.io/2018/02/11/LeetCode-002-Add-Two-Numbers/</id>
    <published>2018-02-11T06:57:37.000Z</published>
    <updated>2018-02-12T03:48:24.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>#002 Add Two Numbers</p><blockquote><p>You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>Output: 7 -&gt; 0 -&gt; 8</p><p>#####思路：</p><ol><li>建立一个新的链表List</li><li>依次检测两个链表节点是否为空，不为空则检测值</li><li>如果检测到值，<code>int value = val1 + val2 + remain;</code></li><li>val1=l1-&gt;val,val2=l2-&gt;val,它们被初始化为0,remain为进位值.</li><li>将value存入List节点里<br>#####代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode* <span class="title">addTwoNumbers</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> remain = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//new list</span></span><br><span class="line">    ListNode* head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);<span class="comment">//head node,it is empty.</span></span><br><span class="line">    ListNode* p = head;</span><br><span class="line">    <span class="keyword">if</span>(l1==<span class="literal">NULL</span> &amp;&amp; l2==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l1==<span class="literal">NULL</span> &amp;&amp; l2!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> l2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l1!=<span class="literal">NULL</span> &amp;&amp; l2==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l1 != <span class="literal">NULL</span> ||  l2 != <span class="literal">NULL</span>)<span class="comment">//only two list get end,while will be finish.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> val1 = <span class="number">0</span>, val2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            val1 = l1-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            val2 = l2-&gt;val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> value = val1 + val2 + remain;</span><br><span class="line">        remain = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(value &gt;= <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            value -= <span class="number">10</span>;<span class="comment">//value = value % 10</span></span><br><span class="line">            remain = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//build List</span></span><br><span class="line">        ListNode * pos = <span class="keyword">new</span> ListNode(value);</span><br><span class="line">        p-&gt;next = pos;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l1 != <span class="literal">NULL</span>)</span><br><span class="line">            l1 = l1-&gt;next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(l2 != <span class="literal">NULL</span>)</span><br><span class="line">            l2 = l2-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if ABCDE</span></span><br><span class="line"><span class="comment">    if FGHIG</span></span><br><span class="line"><span class="comment">    AND IF E+G&gt;10</span></span><br><span class="line"><span class="comment">    we need make a new node,it's val is (E+G)%10.</span></span><br><span class="line"><span class="comment">    like this:</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(remain != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ListNode* pos = <span class="keyword">new</span> ListNode(remain);</span><br><span class="line">        p-&gt;next = pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;next;</span><br><span class="line">    <span class="comment">//!!!__Don't return head because head is empty,head-&gt;next is first node with val.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>#####知识点</p><ol><li>如何用尾插法建立链表</li><li>同时遍历两个链表并进行相应处理（均遍历到结尾时处理才结束）</li><li>当遍历A节点时，得到需要处理A-&gt;next的信息，如何在遍历时延后一步处理。<ol><li>方案1：用一个Bool量标记是否应当处理，在建表后的语句中加入处理语句</li><li>方案2：类似这种求和，将信息保留在remain中，每次加上remain，无信息则remain=0,否则remain=溢出数.<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方案1</span></span><br><span class="line"><span class="keyword">bool</span> deal=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">....<span class="comment">//here you build list</span></span><br><span class="line"><span class="keyword">if</span>(deal)&#123;</span><br><span class="line">....<span class="comment">//here you deal something</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方案2</span></span><br><span class="line"><span class="keyword">int</span> value = val1 + val2 + remain;</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSDN 博客搬家&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="sherry0429.github.io/categories/algorithm/"/>
    
    
      <category term="c" scheme="sherry0429.github.io/tags/c/"/>
    
      <category term="leetcode" scheme="sherry0429.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode #001 Two Num</title>
    <link href="sherry0429.github.io/2018/02/11/LeetCode-001-Two-Num/"/>
    <id>sherry0429.github.io/2018/02/11/LeetCode-001-Two-Num/</id>
    <published>2018-02-11T06:57:22.000Z</published>
    <updated>2018-02-12T03:48:14.000Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>#01 Two Num</p><blockquote><p>Given an array of integers, find two numbers such that they add up to a specific target number.<br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution.</p><p>Input: numbers={2, 7, 11, 15}, target=9<br>Output: index1=1, index2=2</p><p>#####思路1：</p><ol><li>用STL Map，将数据存入Map，而后查找First和Target-First是否都存在，如都存在，输出他们的下标。（即First，Target-First对应的Value）.</li><li>迭代器iterator两个域,iterator-&gt;first对应Key,iterator-&gt;second对应Value.</li><li>循环遍历Nums，检测Map，跳过Nums下标为Map-Value的元素。（重要）<br>#####代码：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; solve;</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; Map;</span><br><span class="line">        <span class="keyword">if</span> (nums.size() &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> solve;   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.size(); i++)&#123;</span><br><span class="line">            Map[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = target - nums[i];</span><br><span class="line">            <span class="keyword">if</span> (Map[temp]!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="comment">//this if is important</span></span><br><span class="line">                <span class="keyword">if</span>(i == Map[temp])&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="comment">//Map's value don't need in 'for' fuction.</span></span><br><span class="line">                &#125;</span><br><span class="line">                solve.push_back(i+<span class="number">1</span>);</span><br><span class="line">                solve.push_back(Map[temp]+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> solve;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> solve;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>####思路2</p><ol><li>分配一个数组空间，将数据拷贝至A</li><li>将A数组排序</li><li>建立两个查找指针头指针X,尾指针Y,依次相加比较指针所指的值E,F</li><li>E大于F Y++</li><li>E小于F X++</li><li>当指针相等或相交时退出循环</li><li>提前退出循环说明找到了E+F=target</li><li>遍历nums，当值与找到的E,F相等时,将相应的下标Push进Vector</li></ol><p>#####代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* a,<span class="keyword">const</span> <span class="keyword">void</span>* b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">int</span>*)a - *(<span class="keyword">int</span>*)b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; twoSum(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//vector&lt;int&gt;temp;</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;index;</span><br><span class="line">        <span class="keyword">int</span> len = nums.size();</span><br><span class="line">        <span class="keyword">int</span> *temp = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">            temp[i] = nums[i];</span><br><span class="line">        <span class="comment">//for(int i = 0; i &lt; len;i++)</span></span><br><span class="line">        <span class="comment">//  temp.push_back(nums[i]);</span></span><br><span class="line">        <span class="comment">//sort(temp.begin(),temp.end());</span></span><br><span class="line">        qsort(temp,len,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),compare);</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((temp[left] + temp[right]) &gt; target)</span><br><span class="line">                right--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((temp[left] + temp[right]) &lt; target)</span><br><span class="line">                left++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == temp[left] || nums[i] == temp[right])</span><br><span class="line">                index.push_back(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> []temp;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>#####知识点</p><ol><li>在一个数组中查找指定元素</li><li>对数组元素进行排序</li><li>得到排序数组中比某数小或大的区域（该数不一定存在在数组内）</li><li>知道一组值，求与这组值有关的另一组值</li><li>方法2的一种特殊思路.</li></ol><p>#####官网给出的Solution</p><blockquote><p>####O(n2) runtime, O(1) space – Brute force:</p><p>The brute force approach is simple. Loop through each element x and find if there is another value that equals to target – x. As finding another value requires looping through the rest of array, its runtime complexity is O(n2).</p><p>####O(n) runtime, O(n) space – Hash table:</p><p>We could reduce the runtime complexity of looking up a value to O(1) using a hash map that maps a value to its index.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSDN 博客搬家&lt;/p&gt;
    
    </summary>
    
      <category term="algorithm" scheme="sherry0429.github.io/categories/algorithm/"/>
    
    
      <category term="c" scheme="sherry0429.github.io/tags/c/"/>
    
      <category term="leetcode" scheme="sherry0429.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
